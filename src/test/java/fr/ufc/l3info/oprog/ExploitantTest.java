package fr.ufc.l3info.oprog;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;

public class ExploitantTest {

    private Exploitant e;

    @Before
    public void beforeExploitant() {
        this.e = new Exploitant();
    }

    /* public void acquerirVelo(Velo v) */

    @Test
    public void acquerirVeloTest() {

    }

    /* public void entretenirVelos() */

    @Test
    public void entretenirVelosTestAbimerReviser() {
        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        IVelo v3 = new Velo();

        v1.parcourir(1000);
        v1.abimer();

        v2.parcourir(1000);

        v3.abimer();

        e.acquerirVelo(v1);
        e.acquerirVelo(v2);
        e.acquerirVelo(v3);

        e.entretenirVelos();

        Assert.assertFalse(v1.estAbime());
        Assert.assertEquals(500, v1.prochaineRevision(), 0.00);
        Assert.assertEquals(500, v2.prochaineRevision(), 0.00);
        Assert.assertFalse(v3.estAbime());
    }

    @Test
    public void entretenirVelosTestNonAbimerNonReviser() {
        IVelo v1 = new Velo();

        v1.parcourir(100);

        e.acquerirVelo(v1);

        e.entretenirVelos();

        Assert.assertFalse(v1.estAbime());
        Assert.assertEquals(400, v1.prochaineRevision(), 0.00);
    }

    /* public void ravitailler(Ville v) */

    @Test
    public void ravitaillerTest() throws IOException {
        Ville v = new Ville();
        v.initialiser(new File("./target/classes/data/stationsOK.txt"));

        Station s = v.getStation("Avenue du Maréchal Foch");

        Assert.assertNotNull(s);

        Assert.assertEquals(10, s.capacite()); //test

        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        IVelo v3 = new Velo();
        IVelo v4 = new Velo();
        v1.abimer();
        v2.abimer();

        s.arrimerVelo(v1, 1);
        s.arrimerVelo(v2, 2);
        s.arrimerVelo(v3, 3);
        s.arrimerVelo(v4, 4);

        e.ravitailler(v);

        Assert.assertNotEquals(v1, s.veloALaBorne(1));
        Assert.assertNotEquals(v2, s.veloALaBorne(2));
    }

    @Test
    public void ravitaillerTestRien() throws IOException {
        Ville v = new Ville();
        v.initialiser(new File("./target/classes/data/stationsOK.txt"));

        Station s = v.getStation("Avenue du Maréchal Foch");

        Assert.assertNotNull(s);

        Assert.assertEquals(5, s.capacite()); //test

        IVelo v1 = new Velo();
        IVelo v2 = new Velo();
        IVelo v3 = new Velo();
        IVelo v4 = new Velo();
        v1.abimer();
        v2.abimer();

        s.arrimerVelo(v1, 1);
        s.arrimerVelo(v2, 2);
        s.arrimerVelo(v3, 3);
        s.arrimerVelo(v4, 4);

        e.ravitailler(v);

        Assert.assertNotEquals(v1, s.veloALaBorne(1));
        Assert.assertNotEquals(v2, s.veloALaBorne(2));
    }




}
